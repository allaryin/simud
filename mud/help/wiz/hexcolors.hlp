WIZARD REFERENCE
HEX COLORS
Sometimes, you may run across colors set as hexidecimal values in MUD code. This can be confusing if you aren't familiar with what each bit means for color-setting. There are eight bits used (a full byte), divided into four segments.

The most significant bit is a transparency toggle. A value of 1 means the background color is transparent, allowing the color of whatever is painted beneath your object to show through; a value of 0 means the object's own background color is displayed. The next three bits represent the background color. The least four significant bits represent the foreground color, with the highest of those bits being a brightness toggle and the bottom three bits being the color itself.

It may help to visualize the actual bits being set:

 ~CBRTMSB  _ _ _ _ _ _ _ _  LSB~CHLP
      ~[010|~CHLP ~[030|   |~CHLP ~[020|~CHLP ~[050|   |~CHLP
      ~[010|~CHLP ~[030`-.-'~CHLP ~[020|~CHLP ~[050`---^-->~CHLP foreground color
      ~[010|~CHLP   ~[030|~CHLP   ~[020|~CHLP
      ~[010|~CHLP   ~[030|~CHLP   ~[020`-------->~CHLP brightness toggle
      ~[010|~CHLP   ~[030|~CHLP
      ~[010|~CHLP   ~[030`------------>~CHLP background color
      ~[010|~CHLP
      ~[010`---------------->~CHLP transparency toggle

Each of the eight base colors has an ANSI number associated with it. Below is each color in binary and decimal, along with its corresponding bright color. The fourth bit, the brightness bit, is separated from the three-digit color code so the pattern is easier to see. Background colors will not use this fourth bit, since you cannot have bright versions of the colors as backgrounds.

 ~CBRTColor      Bin   Dec      Bright    Bin    Dec~CHLP
 ~[007Black~CHLP     0 000   0       ~[080Gray~CHLP     1 000    8 
 ~[010Red~CHLP       0 001   1       ~[090Red~CHLP      1 001    9
 ~[020Green~CHLP     0 010   2       ~[100Green~CHLP    1 010   10
 ~[030Brown~CHLP     0 011   3       ~[110Yellow~CHLP   1 011   11
 ~[040Blue~CHLP      0 100   4       ~[120Blue~CHLP     1 100   12
 ~[050Purple~CHLP    0 101   5       ~[130Magenta~CHLP  1 101   13
 ~[060Teal~CHLP      0 110   6       ~[140Cyan~CHLP     1 110   14
 ~[070Gray~CHLP      0 111   7       ~[150White~CHLP    1 111   15

You can use this number in any base within your LPC code. For example, say you wanted a bright red foreground and a purple background, like ~[095this~CHLP (yes, it's ugly). In binary, that number is ~CLAB01011001~CHLP, which breaks down to ~CLAB0 101 1 001~CHLP. Use the numbers listed above to confirm that this will give the desired color if you don't immediately see where the values come from.

In decimal, that same number is written as ~CLAB89~CHLP, in octal, as ~CLAB131~CHLP, and in hexadecimal, as ~CLAB59~CHLP. Remember to prefix binary numbers with "0b", octal numers with "0o", and hexadecimal numbers with "0x". Otherwise, the LPC compiler will interpret the number as a decimal value.

One last note: Be aware that objects that return to ~CLABquery_is_landscape()~CHLP are always painted first, which could affect transparency.

See also: ~CREFcolors~CHLP, ~CREFcolor~CHLP
