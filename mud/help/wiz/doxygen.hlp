WIZARD HELP
DOXYGEN
This MUDlib was designed so that it could make use of Doxygen for documenting the code. Doxygen is a program which reads through all of the MUD's source code, and then creates web pages explaining what it finds. By putting specially formatted comments in your source code, you create additional information for Doxygen to put on these pages.

The best place to get information about the actual code in the MUDlib is from the Doxygen-built web pages. Right now, the pages are at http://www.simud.org/doxygen (if this information is outdated, please file a ~CCOMtypo~CHLP regarding this help page so an administrator can fix it).

~CTITFile Summary Comments~CHLP

For adding Doxygen comments to your own code, place the following at the beginning of the file:

 ~CDEF/// A brief description of what is in the file.
 /** A more detailed description of what is in the file. Explain
   * general principles about how to use the object, and any tricks
   * about inheriting it and using it. You should give a rough idea
   * of how it works, where it keeps configuration info, what
   * UID it needs to run, etc.
   */

 #ifdef DOXYGEN
 struct Objectname {
 #endif~CHLP

... and that's all for the beginning of the file. "Objectname" should be the same as the file name, EXCEPT it should be capitalized. At the end of the file, put:

 ~CDEF#ifdef DOXYGEN
 };
 #endif~CHLP

The reason for this odd struct enclosure is simple: it fools Doxygen into thinking that we are using C++, and all these files are huge inline object declarations. When LPC compiles them, it leaves out
the struct lines, because "DOXYGEN" is not defined. Making Doxygen think that everything is in objects results in much clearer documentation.

~CTITFunction Comments~CHLP

Functions are documented as

 ~CDEF/** Basic function description here.
   * \param param1 Description of param 1
   * \param param2 Description of param 2
   * \return a return value description
   */~CHLP

Any section you don't want is optional. You can also stick in \todo or \warning as section tags. If your function description fits on one line, you can use /// instead.

~CTITVariable Comments~CHLP

Variables are documented the same way as functions, but be warned: if your comment comes after the variable declaration, use ///< or /**< %/ instead. For example:

 ~CDEF/// This is a normal comment on x.
 int x;

 int x; ///< This is a comment on x after the declaration.~CHLP

See: ~CREFcoding style~CHLP
