Object(3)                                                            Object(3)



NNAAMMEE
       Object -

SSYYNNOOPPSSIISS
       Inherited by AArreeaa, BBaannkk, Exits, Food [private], HHuunnggeerr, IInnvvbbuubbbbllee,
       MMaappaarreeaa, MMaapprroooomm, OOffffeeddiitt, PPoosssseessss, RReessoouurrccee, RRoooomm, SScceenneerryy, TTrriinnkkeett,
       and WWeeaappoonnOObbjj.


   PPuubblliicc MMeetthhooddss
       void iinniitt ()
       string * qquueerryy______FFLLIISSTT ()
       void ccrreeaattee ()
       void rreesseett ()
       string ddeessttrruuccttoorr (object ob)
       varargs void mmoovvee (object dest, int no_events)
       int vvaalliiddaattee__ppoossiittiioonn ()
       int qquueerryy__aallllooww__sseett (object caller)
       string ggeett__ssttaatt ()
       mapping qquueerryy__aassppeeccttss ()
       int qquueerryy__hhaass__aassppeecctt (int x)
       mapping qquueerryy__vvaarrss ()
       void sseett__vvaarrss (mapping m)
       mixed qquueerryy__vvaarr (string var)
       void sseett__vvaarr (string var, mixed val)
       void rreemmoovvee__vvaarr (string var)
       void oonn__rreessttoorree ()

   PPuubblliicc AAttttrriibbuutteess
       nosave string * ____FFLLIISSTT
       mapping vvaarrss = ([ ])

DDEETTAAIILLEEDD DDEESSCCRRIIPPTTIIOONN
       Defines the basis functions for objects in the mud. Any object that can
       be cloned or moved, and any object that makes use of components (all
       include's that don't have 'const' in the name) should include
       <object.h>, which is how you use this file. This defines some
       reasonably clean default implementations of certain functions.

       Definition at line 12 of file object.c.

MMEEMMBBEERR FFUUNNCCTTIIOONN DDOOCCUUMMEENNTTAATTIIOONN
   vvooiidd ccrreeaattee (())
       The basis create function -- calls all create_ functions in
       this_object(). The __FLIST array of function names is also initialized
       here.

       Reimplemented in BBaannkk, DDoooorr, TTrriinnkkeett, AArreeaa, MMaappaarreeaa, and WWoorrlldd.

       Definition at line 66 of file object.c.

       References __FLIST.

   ssttrriinngg ddeessttrruuccttoorr ((oobbjjeecctt oobb))
       The basis destructor function -- calls all destructor_ functions in
       this_object().

       Reimplemented in WWoorrlldd.

       Definition at line 90 of file object.c.

       References __FLIST.

   ssttrriinngg ggeett__ssttaatt (())
       RReettuurrnnss::
           A string giving a summary of all the public variables in this
           object. Handy for viewing stats of an object.

       Definition at line 178 of file object.c.

   vvooiidd iinniitt (())
       The basis init function -- calls all init_ functions in this_object().

       Reimplemented in OOffffeeddiitt, and PPoosssseessss.

       Definition at line 49 of file object.c.

       References __FLIST.

   vvaarraarrggss vvooiidd mmoovvee ((oobbjjeecctt ddeesstt,, iinntt nnoo__eevveennttss))
       The standard movement function. You should override this function if
       you want to prevent movement under some circumstances, or if you want
       to be able to move without triggering events. Both of these are very
       dangerous things to override, so be sure you know what you are doing.

       The 'noevents' parameter is for system use; the purpose of it is to try
       and speed up slow updates, where it doesn't matter if the objects know
       that they've moved.

       Definition at line 110 of file object.c.

   vvooiidd oonn__rreessttoorree (())
       Calls on_restore on all its contents.

       Definition at line 222 of file object.c.

   ssttrriinngg** qquueerryy______FFLLIISSTT (())
       For debugging purposes.

       Definition at line 59 of file object.c.

       References __FLIST.

   iinntt qquueerryy__aallllooww__sseett ((oobbjjeecctt ccaalllleerr))
       A security mechanism to preserve data integrity between objects. Called
       a *lot*.

       Definition at line 173 of file object.c.

   mmaappppiinngg qquueerryy__aassppeeccttss (())
       RReettuurrnnss::
           An empty mapping. Override this function to define aspects in your
           object (see /include/const/classification.h)

       Definition at line 183 of file object.c.

       Referenced by query_has_aspect().

   iinntt qquueerryy__hhaass__aassppeecctt ((iinntt xx))
       RReettuurrnnss::
           True if this object as the aspect given by _x. See
           /include/const/classification.h for possible values for _x.

       Definition at line 188 of file object.c.

       References query_aspects().

   mmiixxeedd qquueerryy__vvaarr ((ssttrriinngg vvaarr))
       RReettuurrnnss::
           The value of the customized value for _v_a_r -- If there is no custom
           value, 0 is returned.

       Definition at line 203 of file object.c.

       References vars.

   mmaappppiinngg qquueerryy__vvaarrss (())
       RReettuurrnnss::
           The mapping of all customized variables. See the comment on vvaarrss..

       Definition at line 193 of file object.c.

       References vars.

   vvooiidd rreemmoovvee__vvaarr ((ssttrriinngg vvaarr))
       Resets _v_a_r to its default value.

       Definition at line 217 of file object.c.

       References vars.

   vvooiidd rreesseett (())
       The basis reset function -- calls all reset_ functions in
       this_object().

       Definition at line 80 of file object.c.

       References __FLIST.

   vvooiidd sseett__vvaarr ((ssttrriinngg vvaarr,, mmiixxeedd vvaall))
       Sets the value for _v_a_r to _v_a_l. See vvaarrss ffoorr mmoorree iinnffoorrmmaattiioonn..

       Definition at line 212 of file object.c.

       References vars.

   vvooiidd sseett__vvaarrss ((mmaappppiinngg mm))
       Allows you to set the entire customized variables mapping at once. If _m
       is not a mapping, it will be quietly ignored.

       Definition at line 198 of file object.c.

       References vars.

   iinntt vvaalliiddaattee__ppoossiittiioonn (())
       Moves this object to a valid position in the room. Doesn't do anything
       if called in room, area, etc. objects, or if the environment doesn't
       have a a grid. If it's already in a valid position, nothing is done --
       this is only to fix glitches.

       Caveat: This is only intended for use with objects that are
       fundamentally mobile, meaning those that use on_paint. This function
       checks if this object implements on_map_paint; if it does, this call is
       ignored (there's an obnoxious self-collision bug that pops up
       occasionally otherwise).

       RReettuurrnnss::
           True if the object is moved, false otherwise.

       Definition at line 154 of file object.c.

MMEEMMBBEERR DDAATTAA DDOOCCUUMMEENNTTAATTIIOONN
   nnoossaavvee ssttrriinngg** ____FFLLIISSTT
       This variable is considered 'internal.' It is initialized when  this
       object is created, and contains the names of all functions in this
       object which are considered constructors or destructors. Any function
       whose name begins with '_create' is considered a constructor, '_reset'
       for functions called on reset, and '_destructor' for functions called
       when the object is destroyed. There is also an '_init' available,
       called along with the object's iinniitt(()) event.

       Note that you should take some care when creating your own inheritable
       object that you use unique names for your special functions. If there
       are any ambiguities, no error will be detected, but only one of the
       functions will be called.

       If you override the ccrreeaattee(()), ddeessttrruuccttoorr(()), etc. functions in your own
       object, then you should always allow the control to drop through using
       ccrreeaattee(()), ddeessttrruuccttoorr(()), etc. If you don't do this, parts of your
       object's inheritance tree may not initialize properly.

       Definition at line 35 of file object.c.

       Referenced by create(), destructor(), init(), query___FLIST(), and
       reset().

   mmaappppiinngg vvaarrss == (([[ ]]))
       A generic mapping of customized variables on this object. Rather than
       store a large number of variables that are rarely going to get changed
       (for descriptions, etc.), this only records deviations from some fixed
       default value.

       This is initialized to be a mapping because it is ESSENTIAL that this
       be a mapping. Setting it to anything else will cause some very, very
       nasty errors.

       Definition at line 46 of file object.c.

       Referenced by query_var(), query_vars(), remove_var(), set_var(), and
       set_vars().


AAUUTTHHOORR
       Generated automatically by Doxygen for Walraven from the source code.



Walraven                          8 Jan 2004                         Object(3)
